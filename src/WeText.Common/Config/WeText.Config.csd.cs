//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WeText.Common.Config
{
    
    
    /// <summary>
    /// The WeTextConfiguration Configuration Section.
    /// </summary>
    public partial class WeTextConfiguration : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the WeTextConfiguration Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string WeTextConfigurationSectionName = "weTextConfiguration";
        
        /// <summary>
        /// Gets the WeTextConfiguration instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public static global::WeText.Common.Config.WeTextConfiguration Instance
        {
            get
            {
                return ((global::WeText.Common.Config.WeTextConfiguration)(global::System.Configuration.ConfigurationManager.GetSection(global::WeText.Common.Config.WeTextConfiguration.WeTextConfigurationSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::WeText.Common.Config.WeTextConfiguration.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::WeText.Common.Config.WeTextConfiguration.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region CommandQueue Property
        /// <summary>
        /// The XML name of the <see cref="CommandQueue"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string CommandQueuePropertyName = "commandQueue";
        
        /// <summary>
        /// Gets or sets the CommandQueue.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The CommandQueue.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::WeText.Common.Config.WeTextConfiguration.CommandQueuePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::WeText.Common.Config.MessageQueueConfigurationElement CommandQueue
        {
            get
            {
                return ((global::WeText.Common.Config.MessageQueueConfigurationElement)(base[global::WeText.Common.Config.WeTextConfiguration.CommandQueuePropertyName]));
            }
            set
            {
                base[global::WeText.Common.Config.WeTextConfiguration.CommandQueuePropertyName] = value;
            }
        }
        #endregion
        
        #region EventQueue Property
        /// <summary>
        /// The XML name of the <see cref="EventQueue"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string EventQueuePropertyName = "eventQueue";
        
        /// <summary>
        /// Gets or sets the EventQueue.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The EventQueue.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::WeText.Common.Config.WeTextConfiguration.EventQueuePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::WeText.Common.Config.MessageQueueConfigurationElement EventQueue
        {
            get
            {
                return ((global::WeText.Common.Config.MessageQueueConfigurationElement)(base[global::WeText.Common.Config.WeTextConfiguration.EventQueuePropertyName]));
            }
            set
            {
                base[global::WeText.Common.Config.WeTextConfiguration.EventQueuePropertyName] = value;
            }
        }
        #endregion
        
        #region Services Property
        /// <summary>
        /// The XML name of the <see cref="Services"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ServicesPropertyName = "services";
        
        /// <summary>
        /// Gets or sets the Services.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Services.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::WeText.Common.Config.WeTextConfiguration.ServicesPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::WeText.Common.Config.ServiceElementCollection Services
        {
            get
            {
                return ((global::WeText.Common.Config.ServiceElementCollection)(base[global::WeText.Common.Config.WeTextConfiguration.ServicesPropertyName]));
            }
            set
            {
                base[global::WeText.Common.Config.WeTextConfiguration.ServicesPropertyName] = value;
            }
        }
        #endregion
        
        #region ApplicationSetting Property
        /// <summary>
        /// The XML name of the <see cref="ApplicationSetting"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ApplicationSettingPropertyName = "application";
        
        /// <summary>
        /// Gets or sets the ApplicationSetting.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The ApplicationSetting.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::WeText.Common.Config.WeTextConfiguration.ApplicationSettingPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::WeText.Common.Config.ApplicationSettingElement ApplicationSetting
        {
            get
            {
                return ((global::WeText.Common.Config.ApplicationSettingElement)(base[global::WeText.Common.Config.WeTextConfiguration.ApplicationSettingPropertyName]));
            }
            set
            {
                base[global::WeText.Common.Config.WeTextConfiguration.ApplicationSettingPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace WeText.Common.Config
{
    
    
    /// <summary>
    /// The SettingElement Configuration Element.
    /// </summary>
    public partial class SettingElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Key Property
        /// <summary>
        /// The XML name of the <see cref="Key"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string KeyPropertyName = "key";
        
        /// <summary>
        /// Gets or sets the Key.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Key.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::WeText.Common.Config.SettingElement.KeyPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Key
        {
            get
            {
                return ((string)(base[global::WeText.Common.Config.SettingElement.KeyPropertyName]));
            }
            set
            {
                base[global::WeText.Common.Config.SettingElement.KeyPropertyName] = value;
            }
        }
        #endregion
        
        #region Value Property
        /// <summary>
        /// The XML name of the <see cref="Value"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ValuePropertyName = "value";
        
        /// <summary>
        /// Gets or sets the Value.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Value.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::WeText.Common.Config.SettingElement.ValuePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string Value
        {
            get
            {
                return ((string)(base[global::WeText.Common.Config.SettingElement.ValuePropertyName]));
            }
            set
            {
                base[global::WeText.Common.Config.SettingElement.ValuePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace WeText.Common.Config
{
    
    
    /// <summary>
    /// A collection of SettingElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::WeText.Common.Config.SettingElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::WeText.Common.Config.SettingElementCollection.SettingElementPropertyName)]
    public partial class SettingElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::WeText.Common.Config.SettingElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string SettingElementPropertyName = "setting";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::WeText.Common.Config.SettingElementCollection.SettingElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::WeText.Common.Config.SettingElementCollection.SettingElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::WeText.Common.Config.SettingElement)(element)).Key;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::WeText.Common.Config.SettingElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::WeText.Common.Config.SettingElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::WeText.Common.Config.SettingElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::WeText.Common.Config.SettingElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::WeText.Common.Config.SettingElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::WeText.Common.Config.SettingElement this[int index]
        {
            get
            {
                return ((global::WeText.Common.Config.SettingElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::WeText.Common.Config.SettingElement"/> with the specified key.
        /// </summary>
        /// <param name="key">The key of the <see cref="global::WeText.Common.Config.SettingElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::WeText.Common.Config.SettingElement this[object key]
        {
            get
            {
                return ((global::WeText.Common.Config.SettingElement)(base.BaseGet(key)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::WeText.Common.Config.SettingElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="setting">The <see cref="global::WeText.Common.Config.SettingElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::WeText.Common.Config.SettingElement setting)
        {
            base.BaseAdd(setting);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::WeText.Common.Config.SettingElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="setting">The <see cref="global::WeText.Common.Config.SettingElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(global::WeText.Common.Config.SettingElement setting)
        {
            base.BaseRemove(this.GetElementKey(setting));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::WeText.Common.Config.SettingElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::WeText.Common.Config.SettingElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::WeText.Common.Config.SettingElement GetItemAt(int index)
        {
            return ((global::WeText.Common.Config.SettingElement)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::WeText.Common.Config.SettingElement"/> with the specified key.
        /// </summary>
        /// <param name="key">The key of the <see cref="global::WeText.Common.Config.SettingElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::WeText.Common.Config.SettingElement GetItemByKey(string key)
        {
            return ((global::WeText.Common.Config.SettingElement)(base.BaseGet(((object)(key)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace WeText.Common.Config
{
    
    
    /// <summary>
    /// A collection of ServiceElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::WeText.Common.Config.ServiceElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::WeText.Common.Config.ServiceElementCollection.ServiceElementPropertyName)]
    public partial class ServiceElementCollection : global::System.Configuration.ConfigurationElementCollection, global::System.Collections.Generic.ICollection<global::WeText.Common.Config.ServiceElement>
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::WeText.Common.Config.ServiceElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ServiceElementPropertyName = "service";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::WeText.Common.Config.ServiceElementCollection.ServiceElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::WeText.Common.Config.ServiceElementCollection.ServiceElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::WeText.Common.Config.ServiceElement)(element)).Type;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::WeText.Common.Config.ServiceElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::WeText.Common.Config.ServiceElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::WeText.Common.Config.ServiceElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::WeText.Common.Config.ServiceElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::WeText.Common.Config.ServiceElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::WeText.Common.Config.ServiceElement this[int index]
        {
            get
            {
                return ((global::WeText.Common.Config.ServiceElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::WeText.Common.Config.ServiceElement"/> with the specified key.
        /// </summary>
        /// <param name="type">The key of the <see cref="global::WeText.Common.Config.ServiceElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::WeText.Common.Config.ServiceElement this[object type]
        {
            get
            {
                return ((global::WeText.Common.Config.ServiceElement)(base.BaseGet(type)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::WeText.Common.Config.ServiceElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="service">The <see cref="global::WeText.Common.Config.ServiceElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::WeText.Common.Config.ServiceElement service)
        {
            base.BaseAdd(service);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::WeText.Common.Config.ServiceElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="service">The <see cref="global::WeText.Common.Config.ServiceElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(global::WeText.Common.Config.ServiceElement service)
        {
            base.BaseRemove(this.GetElementKey(service));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::WeText.Common.Config.ServiceElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::WeText.Common.Config.ServiceElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::WeText.Common.Config.ServiceElement GetItemAt(int index)
        {
            return ((global::WeText.Common.Config.ServiceElement)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::WeText.Common.Config.ServiceElement"/> with the specified key.
        /// </summary>
        /// <param name="type">The key of the <see cref="global::WeText.Common.Config.ServiceElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::WeText.Common.Config.ServiceElement GetItemByKey(string type)
        {
            return ((global::WeText.Common.Config.ServiceElement)(base.BaseGet(((object)(type)))));
        }
        #endregion
        
        #region ICollection
        /// <summary>
        /// Removes all items from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Clear()
        {
            base.BaseClear();
        }
        
        /// <summary>
        /// Determines whether the <see cref="global::System.Configuration.ConfigurationElementCollection"/> contains a specific value.
        /// </summary>
        /// <param name="service">The object to locate in the <see cref="global::WeText.Common.Config.ServiceElement"/>.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public bool Contains(global::WeText.Common.Config.ServiceElement service)
        {
            return (base.BaseIndexOf(service) >= 0);
        }
        
        /// <summary>
        /// Copies the elements of the <see cref="global::System.Configuration.ConfigurationElementCollection"/> to an <see cref="System.Array"/>, starting at a particular <see cref="System.Array"/> index.
        /// </summary>
        /// <param name="array">The one-dimensional <see cref="System.Array"/> that is the destination of the elements copied from <see cref="global::System.Configuration.ConfigurationElementCollection"/>. The <see cref="System.Array"/> must have zero-based indexing.</param>
        /// <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void CopyTo(global::WeText.Common.Config.ServiceElement[] array, int arrayIndex)
        {
            base.CopyTo(array, arrayIndex);
        }
        
        /// <summary>
        /// Gets a value indicating whether the <see cref="global::System.Configuration.ConfigurationElementCollection"/> is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        bool global::System.Collections.Generic.ICollection<global::WeText.Common.Config.ServiceElement>.IsReadOnly
        {
            get
            {
                return this.IsReadOnly();
            }
        }
        
        /// <summary>
        /// Removes the first occurrence of a specific object from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="item">The <see cref="global::WeText.Common.Config.ServiceElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        bool global::System.Collections.Generic.ICollection<global::WeText.Common.Config.ServiceElement>.Remove(global::WeText.Common.Config.ServiceElement item)
        {
            int idx = base.BaseIndexOf(item);
            if ((idx == -1))
            {
                return false;
            }
            base.BaseRemoveAt(idx);
            return true;
        }
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public new global::System.Collections.Generic.IEnumerator<global::WeText.Common.Config.ServiceElement> GetEnumerator()
        {
            global::System.Collections.Generic.List<global::WeText.Common.Config.ServiceElement> list = new global::System.Collections.Generic.List<global::WeText.Common.Config.ServiceElement>(base.Count);
            global::System.Collections.IEnumerator iter = base.GetEnumerator();
            for (; iter.MoveNext(); )
            {
                list.Add(((global::WeText.Common.Config.ServiceElement)(iter.Current)));
            }
            return list.GetEnumerator();
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace WeText.Common.Config
{
    
    
    /// <summary>
    /// The ServiceElement Configuration Element.
    /// </summary>
    public partial class ServiceElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Type Property
        /// <summary>
        /// The XML name of the <see cref="Type"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string TypePropertyName = "type";
        
        /// <summary>
        /// Gets or sets the Type.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Type.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::WeText.Common.Config.ServiceElement.TypePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Type
        {
            get
            {
                return ((string)(base[global::WeText.Common.Config.ServiceElement.TypePropertyName]));
            }
            set
            {
                base[global::WeText.Common.Config.ServiceElement.TypePropertyName] = value;
            }
        }
        #endregion
        
        #region InstanceId Property
        /// <summary>
        /// The XML name of the <see cref="InstanceId"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string InstanceIdPropertyName = "instanceId";
        
        /// <summary>
        /// Gets or sets the InstanceId.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The InstanceId.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::WeText.Common.Config.ServiceElement.InstanceIdPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string InstanceId
        {
            get
            {
                return ((string)(base[global::WeText.Common.Config.ServiceElement.InstanceIdPropertyName]));
            }
            set
            {
                base[global::WeText.Common.Config.ServiceElement.InstanceIdPropertyName] = value;
            }
        }
        #endregion
        
        #region Settings Property
        /// <summary>
        /// The XML name of the <see cref="Settings"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string SettingsPropertyName = "settings";
        
        /// <summary>
        /// Gets or sets the Settings.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Settings.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::WeText.Common.Config.ServiceElement.SettingsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::WeText.Common.Config.SettingElementCollection Settings
        {
            get
            {
                return ((global::WeText.Common.Config.SettingElementCollection)(base[global::WeText.Common.Config.ServiceElement.SettingsPropertyName]));
            }
            set
            {
                base[global::WeText.Common.Config.ServiceElement.SettingsPropertyName] = value;
            }
        }
        #endregion
        
        #region LocalCommandQueue Property
        /// <summary>
        /// The XML name of the <see cref="LocalCommandQueue"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string LocalCommandQueuePropertyName = "localCommandQueue";
        
        /// <summary>
        /// Gets or sets the LocalCommandQueue.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The LocalCommandQueue.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::WeText.Common.Config.ServiceElement.LocalCommandQueuePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::WeText.Common.Config.MessageQueueConfigurationElement LocalCommandQueue
        {
            get
            {
                return ((global::WeText.Common.Config.MessageQueueConfigurationElement)(base[global::WeText.Common.Config.ServiceElement.LocalCommandQueuePropertyName]));
            }
            set
            {
                base[global::WeText.Common.Config.ServiceElement.LocalCommandQueuePropertyName] = value;
            }
        }
        #endregion
        
        #region LocalEventQueue Property
        /// <summary>
        /// The XML name of the <see cref="LocalEventQueue"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string LocalEventQueuePropertyName = "localEventQueue";
        
        /// <summary>
        /// Gets or sets the LocalEventQueue.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The LocalEventQueue.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::WeText.Common.Config.ServiceElement.LocalEventQueuePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::WeText.Common.Config.MessageQueueConfigurationElement LocalEventQueue
        {
            get
            {
                return ((global::WeText.Common.Config.MessageQueueConfigurationElement)(base[global::WeText.Common.Config.ServiceElement.LocalEventQueuePropertyName]));
            }
            set
            {
                base[global::WeText.Common.Config.ServiceElement.LocalEventQueuePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace WeText.Common.Config
{
    
    
    /// <summary>
    /// The ApplicationSettingElement Configuration Element.
    /// </summary>
    public partial class ApplicationSettingElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Url Property
        /// <summary>
        /// The XML name of the <see cref="Url"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string UrlPropertyName = "url";
        
        /// <summary>
        /// Gets or sets the Url.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Url.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::WeText.Common.Config.ApplicationSettingElement.UrlPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Url
        {
            get
            {
                return ((string)(base[global::WeText.Common.Config.ApplicationSettingElement.UrlPropertyName]));
            }
            set
            {
                base[global::WeText.Common.Config.ApplicationSettingElement.UrlPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace WeText.Common.Config
{
    
    
    /// <summary>
    /// The MessageQueueConfigurationElement Configuration Element.
    /// </summary>
    public partial class MessageQueueConfigurationElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region HostName Property
        /// <summary>
        /// The XML name of the <see cref="HostName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string HostNamePropertyName = "hostName";
        
        /// <summary>
        /// Gets or sets the HostName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The HostName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::WeText.Common.Config.MessageQueueConfigurationElement.HostNamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string HostName
        {
            get
            {
                return ((string)(base[global::WeText.Common.Config.MessageQueueConfigurationElement.HostNamePropertyName]));
            }
            set
            {
                base[global::WeText.Common.Config.MessageQueueConfigurationElement.HostNamePropertyName] = value;
            }
        }
        #endregion
        
        #region ResourceName Property
        /// <summary>
        /// The XML name of the <see cref="ResourceName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ResourceNamePropertyName = "resourceName";
        
        /// <summary>
        /// Gets or sets gets or sets the name of the resource of the message queue. A resource can be either a queue, or an exchange to which queues can be bound.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("Gets or sets the name of the resource of the message queue. A resource can be eit" +
            "her a queue, or an exchange to which queues can be bound.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::WeText.Common.Config.MessageQueueConfigurationElement.ResourceNamePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string ResourceName
        {
            get
            {
                return ((string)(base[global::WeText.Common.Config.MessageQueueConfigurationElement.ResourceNamePropertyName]));
            }
            set
            {
                base[global::WeText.Common.Config.MessageQueueConfigurationElement.ResourceNamePropertyName] = value;
            }
        }
        #endregion
        
        #region ResourceType Property
        /// <summary>
        /// The XML name of the <see cref="ResourceType"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ResourceTypePropertyName = "resourceType";
        
        /// <summary>
        /// Gets or sets the ResourceType.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The ResourceType.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::WeText.Common.Config.MessageQueueConfigurationElement.ResourceTypePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::WeText.Common.Config.MessageQueueResourceType ResourceType
        {
            get
            {
                return ((global::WeText.Common.Config.MessageQueueResourceType)(base[global::WeText.Common.Config.MessageQueueConfigurationElement.ResourceTypePropertyName]));
            }
            set
            {
                base[global::WeText.Common.Config.MessageQueueConfigurationElement.ResourceTypePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace WeText.Common.Config
{
    
    
    /// <summary>
    /// MessageQueueResourceType.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
    public enum MessageQueueResourceType
    {
        
        /// <summary>
        /// MessageExchange.
        /// </summary>
        MessageExchange,
        
        /// <summary>
        /// MessageQueue.
        /// </summary>
        MessageQueue,
    }
}
