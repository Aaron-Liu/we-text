//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WeText.Common.Config
{
    
    
    /// <summary>
    /// The WeTextConfiguration Configuration Section.
    /// </summary>
    public partial class WeTextConfiguration : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the WeTextConfiguration Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string WeTextConfigurationSectionName = "weTextConfiguration";
        
        /// <summary>
        /// Gets the WeTextConfiguration instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public static global::WeText.Common.Config.WeTextConfiguration Instance
        {
            get
            {
                return ((global::WeText.Common.Config.WeTextConfiguration)(global::System.Configuration.ConfigurationManager.GetSection(global::WeText.Common.Config.WeTextConfiguration.WeTextConfigurationSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::WeText.Common.Config.WeTextConfiguration.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::WeText.Common.Config.WeTextConfiguration.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region CommandSenderSettings Property
        /// <summary>
        /// The XML name of the <see cref="CommandSenderSettings"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string CommandSenderSettingsPropertyName = "commandSender";
        
        /// <summary>
        /// Gets or sets the CommandSenderSettings.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The CommandSenderSettings.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::WeText.Common.Config.WeTextConfiguration.CommandSenderSettingsPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::WeText.Common.Config.SettingElementCollection CommandSenderSettings
        {
            get
            {
                return ((global::WeText.Common.Config.SettingElementCollection)(base[global::WeText.Common.Config.WeTextConfiguration.CommandSenderSettingsPropertyName]));
            }
            set
            {
                base[global::WeText.Common.Config.WeTextConfiguration.CommandSenderSettingsPropertyName] = value;
            }
        }
        #endregion
        
        #region EventPublisherSettings Property
        /// <summary>
        /// The XML name of the <see cref="EventPublisherSettings"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string EventPublisherSettingsPropertyName = "eventPublisher";
        
        /// <summary>
        /// Gets or sets the EventPublisherSettings.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The EventPublisherSettings.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::WeText.Common.Config.WeTextConfiguration.EventPublisherSettingsPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::WeText.Common.Config.SettingElementCollection EventPublisherSettings
        {
            get
            {
                return ((global::WeText.Common.Config.SettingElementCollection)(base[global::WeText.Common.Config.WeTextConfiguration.EventPublisherSettingsPropertyName]));
            }
            set
            {
                base[global::WeText.Common.Config.WeTextConfiguration.EventPublisherSettingsPropertyName] = value;
            }
        }
        #endregion
        
        #region Services Property
        /// <summary>
        /// The XML name of the <see cref="Services"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ServicesPropertyName = "services";
        
        /// <summary>
        /// Gets or sets the Services.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Services.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::WeText.Common.Config.WeTextConfiguration.ServicesPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::WeText.Common.Config.ServiceElementCollection Services
        {
            get
            {
                return ((global::WeText.Common.Config.ServiceElementCollection)(base[global::WeText.Common.Config.WeTextConfiguration.ServicesPropertyName]));
            }
            set
            {
                base[global::WeText.Common.Config.WeTextConfiguration.ServicesPropertyName] = value;
            }
        }
        #endregion
        
        #region ApplicationSetting Property
        /// <summary>
        /// The XML name of the <see cref="ApplicationSetting"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ApplicationSettingPropertyName = "application";
        
        /// <summary>
        /// Gets or sets the ApplicationSetting.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The ApplicationSetting.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::WeText.Common.Config.WeTextConfiguration.ApplicationSettingPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::WeText.Common.Config.ApplicationSettingElement ApplicationSetting
        {
            get
            {
                return ((global::WeText.Common.Config.ApplicationSettingElement)(base[global::WeText.Common.Config.WeTextConfiguration.ApplicationSettingPropertyName]));
            }
            set
            {
                base[global::WeText.Common.Config.WeTextConfiguration.ApplicationSettingPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace WeText.Common.Config
{
    
    
    /// <summary>
    /// The SettingElement Configuration Element.
    /// </summary>
    public partial class SettingElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Key Property
        /// <summary>
        /// The XML name of the <see cref="Key"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string KeyPropertyName = "key";
        
        /// <summary>
        /// Gets or sets the Key.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Key.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::WeText.Common.Config.SettingElement.KeyPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Key
        {
            get
            {
                return ((string)(base[global::WeText.Common.Config.SettingElement.KeyPropertyName]));
            }
            set
            {
                base[global::WeText.Common.Config.SettingElement.KeyPropertyName] = value;
            }
        }
        #endregion
        
        #region Value Property
        /// <summary>
        /// The XML name of the <see cref="Value"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ValuePropertyName = "value";
        
        /// <summary>
        /// Gets or sets the Value.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Value.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::WeText.Common.Config.SettingElement.ValuePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string Value
        {
            get
            {
                return ((string)(base[global::WeText.Common.Config.SettingElement.ValuePropertyName]));
            }
            set
            {
                base[global::WeText.Common.Config.SettingElement.ValuePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace WeText.Common.Config
{
    
    
    /// <summary>
    /// A collection of SettingElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::WeText.Common.Config.SettingElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::WeText.Common.Config.SettingElementCollection.SettingElementPropertyName)]
    public partial class SettingElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::WeText.Common.Config.SettingElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string SettingElementPropertyName = "setting";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::WeText.Common.Config.SettingElementCollection.SettingElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::WeText.Common.Config.SettingElementCollection.SettingElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::WeText.Common.Config.SettingElement)(element)).Key;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::WeText.Common.Config.SettingElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::WeText.Common.Config.SettingElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::WeText.Common.Config.SettingElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::WeText.Common.Config.SettingElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::WeText.Common.Config.SettingElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::WeText.Common.Config.SettingElement this[int index]
        {
            get
            {
                return ((global::WeText.Common.Config.SettingElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::WeText.Common.Config.SettingElement"/> with the specified key.
        /// </summary>
        /// <param name="key">The key of the <see cref="global::WeText.Common.Config.SettingElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::WeText.Common.Config.SettingElement this[object key]
        {
            get
            {
                return ((global::WeText.Common.Config.SettingElement)(base.BaseGet(key)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::WeText.Common.Config.SettingElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="setting">The <see cref="global::WeText.Common.Config.SettingElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::WeText.Common.Config.SettingElement setting)
        {
            base.BaseAdd(setting);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::WeText.Common.Config.SettingElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="setting">The <see cref="global::WeText.Common.Config.SettingElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(global::WeText.Common.Config.SettingElement setting)
        {
            base.BaseRemove(this.GetElementKey(setting));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::WeText.Common.Config.SettingElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::WeText.Common.Config.SettingElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::WeText.Common.Config.SettingElement GetItemAt(int index)
        {
            return ((global::WeText.Common.Config.SettingElement)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::WeText.Common.Config.SettingElement"/> with the specified key.
        /// </summary>
        /// <param name="key">The key of the <see cref="global::WeText.Common.Config.SettingElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::WeText.Common.Config.SettingElement GetItemByKey(string key)
        {
            return ((global::WeText.Common.Config.SettingElement)(base.BaseGet(((object)(key)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace WeText.Common.Config
{
    
    
    /// <summary>
    /// A collection of ServiceElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::WeText.Common.Config.ServiceElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::WeText.Common.Config.ServiceElementCollection.ServiceElementPropertyName)]
    public partial class ServiceElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::WeText.Common.Config.ServiceElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ServiceElementPropertyName = "service";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::WeText.Common.Config.ServiceElementCollection.ServiceElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::WeText.Common.Config.ServiceElementCollection.ServiceElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::WeText.Common.Config.ServiceElement)(element)).Type;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::WeText.Common.Config.ServiceElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::WeText.Common.Config.ServiceElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::WeText.Common.Config.ServiceElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::WeText.Common.Config.ServiceElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::WeText.Common.Config.ServiceElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::WeText.Common.Config.ServiceElement this[int index]
        {
            get
            {
                return ((global::WeText.Common.Config.ServiceElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::WeText.Common.Config.ServiceElement"/> with the specified key.
        /// </summary>
        /// <param name="type">The key of the <see cref="global::WeText.Common.Config.ServiceElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::WeText.Common.Config.ServiceElement this[object type]
        {
            get
            {
                return ((global::WeText.Common.Config.ServiceElement)(base.BaseGet(type)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::WeText.Common.Config.ServiceElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="service">The <see cref="global::WeText.Common.Config.ServiceElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::WeText.Common.Config.ServiceElement service)
        {
            base.BaseAdd(service);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::WeText.Common.Config.ServiceElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="service">The <see cref="global::WeText.Common.Config.ServiceElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(global::WeText.Common.Config.ServiceElement service)
        {
            base.BaseRemove(this.GetElementKey(service));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::WeText.Common.Config.ServiceElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::WeText.Common.Config.ServiceElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::WeText.Common.Config.ServiceElement GetItemAt(int index)
        {
            return ((global::WeText.Common.Config.ServiceElement)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::WeText.Common.Config.ServiceElement"/> with the specified key.
        /// </summary>
        /// <param name="type">The key of the <see cref="global::WeText.Common.Config.ServiceElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::WeText.Common.Config.ServiceElement GetItemByKey(string type)
        {
            return ((global::WeText.Common.Config.ServiceElement)(base.BaseGet(((object)(type)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace WeText.Common.Config
{
    
    
    /// <summary>
    /// The ServiceElement Configuration Element.
    /// </summary>
    public partial class ServiceElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Type Property
        /// <summary>
        /// The XML name of the <see cref="Type"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string TypePropertyName = "type";
        
        /// <summary>
        /// Gets or sets the Type.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Type.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::WeText.Common.Config.ServiceElement.TypePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Type
        {
            get
            {
                return ((string)(base[global::WeText.Common.Config.ServiceElement.TypePropertyName]));
            }
            set
            {
                base[global::WeText.Common.Config.ServiceElement.TypePropertyName] = value;
            }
        }
        #endregion
        
        #region Settings Property
        /// <summary>
        /// The XML name of the <see cref="Settings"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string SettingsPropertyName = "settings";
        
        /// <summary>
        /// Gets or sets the Settings.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Settings.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::WeText.Common.Config.ServiceElement.SettingsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::WeText.Common.Config.SettingElementCollection Settings
        {
            get
            {
                return ((global::WeText.Common.Config.SettingElementCollection)(base[global::WeText.Common.Config.ServiceElement.SettingsPropertyName]));
            }
            set
            {
                base[global::WeText.Common.Config.ServiceElement.SettingsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace WeText.Common.Config
{
    
    
    /// <summary>
    /// The ApplicationSettingElement Configuration Element.
    /// </summary>
    public partial class ApplicationSettingElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Url Property
        /// <summary>
        /// The XML name of the <see cref="Url"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string UrlPropertyName = "url";
        
        /// <summary>
        /// Gets or sets the Url.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Url.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::WeText.Common.Config.ApplicationSettingElement.UrlPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Url
        {
            get
            {
                return ((string)(base[global::WeText.Common.Config.ApplicationSettingElement.UrlPropertyName]));
            }
            set
            {
                base[global::WeText.Common.Config.ApplicationSettingElement.UrlPropertyName] = value;
            }
        }
        #endregion
    }
}
