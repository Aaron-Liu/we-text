using System;
using System.Collections.Generic;
using System.Data.Common;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using WeText.Common.Specifications;

namespace WeText.Common.Querying
{
    public abstract class TableDataGateway : ITableDataGateway
    {

        /// <summary>
        /// Creates a new instance of the where clause builder.
        /// </summary>
        /// <typeparam name="TTableObject">The type of the object.</typeparam>
        /// <returns>The instance of the where clause builder.</returns>
        protected abstract WhereClauseBuilder<TTableObject> CreateWhereClauseBuilder<TTableObject>()
            where TTableObject : class, new();

        /// <summary>
        /// Creates the database connection.
        /// </summary>
        /// <returns>The <see cref="System.Data.Common.DbConnection"/> instance which represents
        /// the open connection to the relational database.</returns>
        protected abstract DbConnection CreateDatabaseConnection();

        /// <summary>
        /// Creates a database parameter object.
        /// </summary>
        /// <returns>The instance of database parameter object.</returns>
        protected abstract DbParameter CreateParameter();

        /// <summary>
        /// Creates a instance of the command object.
        /// </summary>
        /// <param name="sql">The SQL statement used for creating the command object.</param>
        /// <param name="connection">The <see cref="System.Data.Common.DbConnection"/> which represents
        /// the database connection.</param>
        /// <returns>The instance of the command object.</returns>
        protected abstract DbCommand CreateCommand(string sql, DbConnection connection);

        protected virtual string GetAllFieldNames<TTableObject>(bool excludeAutoGeneratedKeys = false)
            where TTableObject : class, new() => string.Join(", ", typeof(TTableObject)
                .GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.GetProperty | BindingFlags.SetProperty)
                .Where(p => !excludeAutoGeneratedKeys || !p.IsDefined(typeof(KeyAttribute)) || !p.GetCustomAttribute<KeyAttribute>().AutoGenerated)
                .Select(p => p.Name).ToArray());


        /// <summary>
        /// Gets a comma separated list of the field parameter names for INSERT operation, by using the
        /// specified fields.
        /// </summary>
        /// <typeparam name="TTableObject">The type of the object.</typeparam>
        /// <param name="fields">The <c>PropertyBag</c> object which contains the fields.</param>
        /// <returns>The comma separated list of the field parameter names for INSERT operation.</returns>
        /// <remarks>The auto-generated identity fields will be omitted.</remarks>
        protected virtual string GetInsertParameterNameList<TTableObject>(WhereClauseBuilder<TTableObject> whereClauseBuilder)
            where TTableObject : class, new()
        {
            return string.Join(", ", typeof(TTableObject)
                .GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.GetProperty | BindingFlags.SetProperty)
                .Where(p => !p.IsDefined(typeof(KeyAttribute)) || !p.GetCustomAttribute<KeyAttribute>().AutoGenerated)
                .Select(p => $"{whereClauseBuilder.ParameterChar}{p.Name.ToLower()}"));
        }

        /// <summary>
        /// 
        /// </summary>
        /// <typeparam name="TTableObject"></typeparam>
        /// <param name="obj"></param>
        /// <param name="whereClauseBuilder"></param>
        /// <returns></returns>
        protected virtual IEnumerable<DbParameter> GetInsertDbParameterList<TTableObject>(TTableObject obj, WhereClauseBuilder<TTableObject> whereClauseBuilder)
            where TTableObject : class, new()
        {
            var parameters = new List<DbParameter>();
            typeof(TTableObject)
                .GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.GetProperty | BindingFlags.SetProperty)
                .Where(p => !p.IsDefined(typeof(KeyAttribute)) || !p.GetCustomAttribute<KeyAttribute>().AutoGenerated)
                .ToList()
                .ForEach(p =>
                {
                    var parameter = this.CreateParameter();
                    parameter.ParameterName = $"{whereClauseBuilder.ParameterChar}{p.Name.ToLower()}";
                    parameter.Value = p.GetValue(obj);
                    parameters.Add(parameter);
                });
            return parameters;
        }

        protected virtual string GetTableName<TTableObject>()
            where TTableObject : class, new()
        {
            if (typeof(TTableObject).IsDefined(typeof(ToTableAttribute)))
            {
                return typeof(TTableObject).GetCustomAttribute<ToTableAttribute>().Name;
            }
            return typeof(TTableObject).Name;
        }

        /// <summary>
        /// Gets a list of database parameters for constructing the selection criteria clause.
        /// </summary>
        /// <typeparam name="T">The type of the object.</typeparam>
        /// <param name="parameterValues">The <c>Dictionary&lt;string, object&gt;</c> instance which contains the criteria.</param>
        /// <returns>The list of database parameters.</returns>
        protected virtual List<DbParameter> GetSelectCriteriaDbParameterList<T>(Dictionary<string, object> parameterValues)
            where T : class, new()
        {
            List<DbParameter> collection = new List<DbParameter>();
            foreach (var kvp in parameterValues)
            {
                DbParameter param = CreateParameter();
                param.ParameterName = kvp.Key;
                param.Value = kvp.Value;
                collection.Add(param);
            }
            return collection;
        }

        /// <summary>
        /// Creates the data object instance from a <see cref="System.Data.Common.DbDataReader"/> instance.
        /// </summary>
        /// <typeparam name="TTableObject">The type of the object to be created.</typeparam>
        /// <param name="reader">The <see cref="System.Data.Common.DbDataReader"/> instance.</param>
        /// <returns>The data object instance.</returns>
        protected virtual TTableObject CreateFromReader<TTableObject>(DbDataReader reader)
            where TTableObject : class, new()
        {
            TTableObject t = new TTableObject();

            typeof(TTableObject)
                .GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.GetProperty | BindingFlags.SetProperty)
                .ToList()
                .ForEach(pi =>
                {
                    if (pi.PropertyType == typeof(Guid))
                        pi.SetValue(t, new Guid(Convert.ToString(reader[pi.Name])), null);
                    else
                        pi.SetValue(t, reader[pi.Name], null);
                });

            return t;
        }

        public async Task InsertAsync<TTableObject>(IEnumerable<TTableObject> tableObjects) where TTableObject : class, new()
        {
            var whereClauseBuilder = this.CreateWhereClauseBuilder<TTableObject>();
            using (var connection = this.CreateDatabaseConnection())
            {
                await connection.OpenAsync();
                using (var transaction = connection.BeginTransaction())
                {
                    try
                    {
                        var sql = $"INSERT INTO {GetTableName<TTableObject>()} ({GetAllFieldNames<TTableObject>(true)}) VALUES ({GetInsertParameterNameList<TTableObject>(whereClauseBuilder)})";
                        using (var command = this.CreateCommand(sql, connection))
                        {
                            command.Transaction = transaction;
                            foreach(var tableObject in tableObjects)
                            {
                                command.Parameters.Clear();
                                var parameters = this.GetInsertDbParameterList<TTableObject>(tableObject, whereClauseBuilder);
                                foreach(var parameter in parameters)
                                {
                                    command.Parameters.Add(parameter);
                                }
                                await command.ExecuteNonQueryAsync();
                            }
                        }
                        transaction.Commit();
                    }
                    catch(Exception ex)
                    {
                        transaction.Rollback();
                    }
                }

            }
        }

        public async Task<IEnumerable<TTableObject>> SelectAsync<TTableObject>(Specification<TTableObject> specification) where TTableObject : class, new()
        {
            using (var connection = this.CreateDatabaseConnection())
            {
                await connection.OpenAsync();

                var sql = $"SELECT {this.GetAllFieldNames<TTableObject>()} FROM {this.GetTableName<TTableObject>()}";
                WhereClauseBuildResult whereClauseBuildResult = null;
                if (specification != null)
                {
                    var whereClauseBuilder = this.CreateWhereClauseBuilder<TTableObject>();
                    whereClauseBuildResult = whereClauseBuilder.BuildWhereClause(specification);
                    sql += $"WHERE {whereClauseBuildResult.WhereClause}";
                }

                using (var command = this.CreateCommand(sql, connection))
                {
                    if (whereClauseBuildResult != null)
                    {
                        command.Parameters.Clear();
                        var parameters = this.GetSelectCriteriaDbParameterList<TTableObject>(whereClauseBuildResult.ParameterValues);
                        foreach (var param in parameters)
                        {
                            command.Parameters.Add(param);
                        }
                    }
                    var reader = await command.ExecuteReaderAsync();
                    List<TTableObject> result = new List<TTableObject>();
                    while (await reader.ReadAsync())
                    {
                        result.Add(this.CreateFromReader<TTableObject>(reader));
                    }
                    reader.Close();
                    return result;
                }
            }
        }
    }
}
